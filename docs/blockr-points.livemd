# Blockr

```elixir
alias Blockr.Game.Canvas
alias Blockr.Game.Point
alias Blockr.Game.Tetromino
```

## One point

```elixir
point =
  Point.new(1, 5)
  |> Point.move_down()
  |> Point.move_down()
  |> Point.move_down()
  |> Point.move_left()
  |> Point.move_right()

Canvas.new(point)
```

## Multiple points

### I shape

```elixir
points =
  [
    Point.new(1, 4),
    Point.new(2, 4),
    Point.new(3, 4),
    Point.new(4, 4)
  ]

Canvas.new(points)
```

#### J shape

```elixir
points =
  [
    Point.new(1, 5),
    Point.new(2, 5),
    Point.new(3, 5),
    Point.new(3, 4)
  ]

Canvas.new(points)
```

#### L shape

```elixir
points =
  [
    Point.new(1, 4),
    Point.new(2, 4),
    Point.new(3, 4),
    Point.new(3, 5)
  ]

Canvas.new(points)
```

### O shape

```elixir
points =
  [
    Point.new(1, 4),
    Point.new(1, 5),
    Point.new(2, 4),
    Point.new(2, 5)
  ]

Canvas.new(points)
```

### S shape

```elixir
points =
  [
    Point.new(2, 5),
    Point.new(2, 6),
    Point.new(3, 4),
    Point.new(3, 5)
  ]

Canvas.new(points)
```

### Z shape

```elixir
points =
  [
    Point.new(2, 4),
    Point.new(2, 5),
    Point.new(3, 5),
    Point.new(3, 6)
  ]

Canvas.new(points)
```

### Move w/ one function call

```elixir
points =
  [
    Point.new(2, 5),
    Point.new(2, 6),
    Point.new(3, 4),
    Point.new(3, 5)
  ]

points
|> Enum.map(&Point.move_right/1)
|> Enum.map(&Point.move_right/1)
|> Enum.map(&Point.move_left/1)
|> Enum.map(&Point.move_down/1)
|> Enum.map(&Point.move_down/1)
|> Enum.map(&Point.move_down/1)
|> Enum.map(&Point.move_left/1)
|> Canvas.new()
```

## Big tetromino

```elixir
points =
  [
    Point.new(2, 2),
    Point.new(3, 2),
    Point.new(4, 2),
    Point.new(4, 3)
  ]

Canvas.tetromino(points)
```

```elixir
defmodule Spinner do
  def swap({row, col}), do: {col, row}

  def flip_left_right({row, col}), do: {row, 5 - col}

  def flip_top_bottom({row, col}), do: {5 - row, col}

  def rotate(point, 0), do: point

  def rotate(point, 90) do
    point
    |> swap()
    |> flip_left_right()
  end

  def rotate(point, 180) do
    point
    |> flip_top_bottom()
    |> flip_left_right()
  end

  def rotate(point, 270) do
    point
    |> swap()
    |> flip_top_bottom()
  end
end
```

```elixir
points
|> Enum.map(&Spinner.swap/1)
|> Canvas.tetromino()
```

```elixir
points
|> Enum.map(&Spinner.flip_left_right/1)
|> Canvas.tetromino()
```

```elixir
points
|> Enum.map(&Spinner.flip_top_bottom/1)
|> Canvas.tetromino()
```

```elixir
points
|> Enum.map(&Spinner.rotate(&1, 0))
|> Canvas.tetromino()
```

```elixir
points
|> Enum.map(&Spinner.rotate(&1, 90))
|> Canvas.tetromino()
```

```elixir
points
|> Enum.map(&Spinner.rotate(&1, 180))
|> Canvas.tetromino()
```

```elixir
points
|> Enum.map(&Spinner.rotate(&1, 270))
|> Canvas.tetromino()
```

## Shapes

### :i shape

```elixir
:i
|> Tetromino.new()
|> Tetromino.to_group()
|> Canvas.tetromino()
```

### :l shape

```elixir
:l
|> Tetromino.new()
|> Tetromino.to_group()
|> Canvas.tetromino()
```

### :j shape

```elixir
:j
|> Tetromino.new()
|> Tetromino.to_group()
|> Canvas.tetromino()
```

### :o shape

```elixir
:o
|> Tetromino.new()
|> Tetromino.to_group()
|> Canvas.tetromino()
```

### :s shape

```elixir
:s
|> Tetromino.new()
|> Tetromino.to_group()
|> Canvas.tetromino()
```

### :t shape

```elixir
:t
|> Tetromino.new()
|> Tetromino.to_group()
|> Canvas.tetromino()
```

### :z shape

```elixir
:z
|> Tetromino.new()
|> Tetromino.to_group()
|> Canvas.tetromino()
```

## Complete through - part 1

Next in our implementation:

* Add a game `Board`
  -- Add walls to our `Board`
* Enhance `Canvas` dimensions to show walls
* Enhance `Canvas` to show background color
* Add score to our `Board`
* Add `Game.left`, `Game.right` and check overloaps when tetromino moves
* Add `Game.fall` and check overlaps when tetromino moves
* Detatch `Tetromino` if `fall` fails
* Score `Tetromino` if `fall` fails
* Remove scored rows on `score`
